{"version":3,"sources":["reducer/toDo/constant.js","components/Point/index.js","components/Button/index.js","components/Filter/index.js","components/List/index.js","components/AllDone/index.js","App.js","reducer/toDo/actions.js","serviceWorker.js","reducer/toDo/index.js","reducer/index.js","index.js"],"names":["SUCCESS_ADD_POINT","SUCCESS_CHANGE_POINT","Point","props","status","id","className","value","name","onChange","event","updatePoint","target","placeholder","disabled","onClick","length","React","memo","children","join","Filter","handleChange","List","useState","filterData","setFilterData","useEffect","data","filter","i","map","point","AllDone","visible","App","dispatch","useDispatch","list","useSelector","state","todo","addPoint","useCallback","type","payload","changeTodo","p","Boolean","window","location","hostname","match","newPoint","initialState","localStorage","getItem","JSON","parse","combineReducers","action","newTodo","concat","store","createStore","reducer","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.affe26e1.chunk.js","sourcesContent":["export const SUCCESS_ADD_POINT = 'toDo/add-point';\nexport const SUCCESS_CHANGE_POINT = 'toDo/change-point';","import React from 'react';\nimport './style.css'\n\nfunction Point(props) {\n  const setName  = (event) => {\n    if (props.status) return;\n    props.updatePoint({ ...props, ...{name: event.target.value}})\n  };\n\n  const setPointStatus  = () => {\n    if (!props.name.length) return;\n    props.updatePoint({ ...props, ...{status: !props.status}})\n  };\n\n  const getClassPoint = (status) =>{\n    return `point-input ${status && \"done-input\"}`\n  }\n\n\n  return (\n  <div id={props.id} className=\"point-container\">\n    <input value={props.name}\n           onChange={setName}\n           className={getClassPoint(props.status)}\n           placeholder=\"Type something...\"\n           disabled={props.status}\n  />\n    <span\n      onClick={setPointStatus}\n    >{props.status ? \"done\" : \"no\"}</span>\n  </div>)\n}\n\nexport default Point;\n","import React from 'react';\nimport './style.css';\n\nfunction Button({children, onClick, disabled = false, className = ''}) {\n  return (\n    <div\n      className={['button', className].join(' ')}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default React.memo(Button);\n","import React from 'react';\nimport Button from '../Button';\nimport './style.css';\n\nfunction Filter({handleChange}) {\n  return(\n    <div className=\"filter-container\">\n      <div>Filter</div>\n      <div  className=\"filter-btn-container\">\n        <Button onClick={() => handleChange('done')}>Done</Button>\n        <Button onClick={() =>  handleChange('no')}>No</Button>\n        <Button onClick={() =>  handleChange(false)}>All</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\nimport Point from '../Point';\nimport Filter from '../Filter';\nimport './style.css';\n\nfunction List(props) {\n  const [filterData, setFilterData] = useState({});\n\n  useEffect(() => {\n    setFilterData({data: props.data, filter: ''})\n  },[props.data]);\n\n  const setFilter = (filter) => {\n    if (!filter) return setFilterData({data: props.data, filter: ''});\n\n    if (filter === 'done'){\n      setFilterData({data: props.data.filter(i => i.status), filter: filter})\n    } else {\n      setFilterData({data: props.data.filter(i => !i.status), filter: filter})\n    }\n  };\n\n  return (<div>\n    <div>\n      <Filter handleChange={setFilter}/>\n    </div>\n    <div className=\"list-container\">\n      {filterData.data && filterData.data.map((point) => (\n        <Point id={point.id}\n               name={point.name}\n               status={point.status}\n               updatePoint = {props.updatePoint}\n        />\n      ))}\n    </div>\n\n  </div>)\n}\n\nexport default List;","import React from 'react';\nimport './style.css';\n\nfunction AllDone({visible}) {\n  return(\n    <div className={['blair', visible? \"db\" : \"dn\"].join(\" \")}>\n    </div>\n  )\n}\n\nexport default AllDone;","import React, {useCallback} from 'react';\nimport {addTodo, changeTodo} from './reducer/toDo/actions';\nimport './App.css';\nimport {useDispatch, useSelector} from 'react-redux';\nimport List from './components/List';\nimport Button from './components/Button';\nimport AllDone from './components/AllDone';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const list = useSelector(state => state.todo.todo);\n\n  const addPoint = useCallback(() => {\n    dispatch(addTodo(list))\n  }, [dispatch, list]);\n\n  const updatePoint =  useCallback((point) => {\n    dispatch(changeTodo(point))\n  }, [dispatch, list]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div className=\"header-title\">My check list</div>\n        <div className=\"header-btn\">\n          <Button\n            className=\"btn-header\"\n            onClick={addPoint}>Add point\n          </Button>\n        </div>\n      </div>\n      <div>\n        <div className=\"all-done\">\n          <AllDone visible={list.length && list.filter(p => p.status).length === list.length}/>\n        </div>\n      </div>\n      <List\n        data={list}\n        updatePoint={updatePoint}/>\n    </div>\n  );\n}\n\nexport default App;","import {\n  SUCCESS_ADD_POINT,\n  SUCCESS_CHANGE_POINT\n} from './constant';\n\nexport function addTodo() {\n  return({\n    type: SUCCESS_ADD_POINT,\n  })\n}\n\nexport function changeTodo(point) {\n  return({\n    type: SUCCESS_CHANGE_POINT,\n    payload: point\n  })\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SUCCESS_ADD_POINT,\n  SUCCESS_CHANGE_POINT,\n} from './constant';\n\nconst newPoint = {\n name: '', status: false\n};\n\nconst initialState = {\n    todo:  localStorage.getItem('todo') ? JSON.parse(localStorage.getItem('todo')) : []\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SUCCESS_ADD_POINT: {\n      const newTodo = state.todo.concat({id: state.todo.length, ...newPoint});\n      return {...state, todo: newTodo};\n    }\n    case SUCCESS_CHANGE_POINT: {\n      const newTodo =  state.todo.map((point)=> point.id ===  action.payload.id ? {...point, status: action.payload.status, name: action.payload.name }: point);\n      return {...state, todo: newTodo};\n    }\n    default:\n      return state\n  }\n}","import todo from './toDo';\nimport {combineReducers} from 'redux';\n\nexport default combineReducers({\n  todo,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducer';\n\nconst store = createStore(reducer);\n\nstore.subscribe(() => {\n  localStorage.setItem('todo', JSON.stringify(store.getState().todo.todo))\n});\n\nReactDOM.render(<Provider store={store}>\n  <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}